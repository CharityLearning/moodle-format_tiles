{"version":3,"file":"course_mod_modal.min.js","sources":["../src/course_mod_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Javascript Module to handle rendering of course modules (e.g. resource/PDF, resource/html, page) in modal windows\n *\n * When the user clicks a PDF course module subtile or old style resource\n * if we are using modals for it (e.g. PDF) , create, populate, launch and size the modal\n *\n * @module      format_tiles/course_mod_modal\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since       Moodle 3.3\n */\n\ndefine([\"jquery\", \"core/modal_factory\", \"core/config\", \"core/templates\", \"core/notification\", \"core/ajax\", 'core/fragment'],\n    function ($, modalFactory, config, Templates, Notification, ajax, Fragment) {\n        \"use strict\";\n\n        /**\n         * Keep references for all modals we have already added to the page,\n         * so that we can relaunch then if needed\n         * @type {{}}\n         */\n        var modalStore = {};\n        var loadingIconHtml;\n        const win = $(window);\n        var courseId;\n        var tilesConfig;\n\n        const Selector = {\n            modal: \".modal\",\n            modalDialog: \".modal-dialog\",\n            modalBody: \".modal-body\",\n            sectionMain: \".section.main\",\n            pageContent: \"#page-content\",\n            regionMain: \"#region-main\",\n            completionState: \"#completion-check-\",\n            cmModal: \".embed_cm_modal\",\n            moodleMediaPlayer: \".mediaplugin_videojs\",\n            closeBtn: \"button.close\",\n            ACTIVITY: \"li.activity\",\n            URLACTIVITYPOPUPLINK: \".activity.modtype_url.urlpopup a\",\n            modalHeader: \".modal-header\",\n            embedModuleButtons: \".embed-module-buttons\",\n            iframe: \"iframe\"\n        };\n\n        const CLASS = {\n            COMPLETION_ENABLED: \"completion-enabled\",\n            COMPLETION_MANUAL: \"completion-manual\",\n            COMPLETION_AUTO: \"completion-auto\", // E.g. grade based.\n            COMPLETION_VIEW: \"completion-view\",\n            COMPLETION_CHECK_BOX: \"completioncheckbox\",\n            COMPLETION_DROPDOWN: \"completion-dropdown\"\n        };\n\n        const modalMinWidth = function () {\n            return Math.min(win.width(), 1100);\n        };\n\n        /**\n         * Some modals contain videos in iframes or objects, which need to stop playing when dismissed.\n         * @param {object} modal the modal which contains the video.\n         */\n        const stopAllVideosOnDismiss = function(modal) {\n            const iframes = modal.find(Selector.iframe);\n            if (iframes.length > 0) {\n                modal.find(Selector.closeBtn).click(function(e) {\n                    $(e.currentTarget).closest(Selector.cmModal).find(Selector.iframe).each(function (index, iframe) {\n                        iframe = $(iframe);\n                        iframe.attr('src', iframe.attr(\"src\"));\n                    });\n                });\n            }\n            const objects = modal.find(\"object\");\n            if (objects.length > 0) {\n                // In this case resetting the URL does not seem to work so we clear it and clear modal from storage.\n                modal.find(Selector.closeBtn).click(function(e) {\n                    const modal = $(e.currentTarget).closest(Selector.cmModal);\n                    modal.find(\"object\").each(function (index, object) {\n                        object = $(object);\n                        object.attr('data', \"\");\n                    });\n                    modalStore[modal.data(\"cmid\")] = undefined;\n                });\n            }\n\n            const moodleMediaPlayer = modal.find(Selector.moodleMediaPlayer);\n            if (moodleMediaPlayer.length > 0) {\n                modal.find(Selector.closeBtn).click(function() {\n                    modal.find(Selector.moodleMediaPlayer).html(\"\");\n                });\n                // Ensure we create a new modal next time.\n                modalStore[modal.data(\"cmid\")] = undefined;\n            }\n        };\n        /**\n         *\n         * @param {number} cmId\n         * @param {number} moduleContextId\n         * @param {number} sectionNum\n         * @param {string} title\n         * @param {string} objectType\n         * @param {string} pluginfileUrl\n         * @param {boolean} completionEnabled\n         * @param {number} existingCompletionState\n         * @param {boolean} isManualCompletion\n         * @param {string} secondaryUrl URL to be shown to user as a fallback if embedded URL does not laod.\n         * @returns {boolean}\n         */\n        const launchCmModal = function (\n                cmId, moduleContextId, sectionNum, title, objectType, pluginfileUrl,\n                completionEnabled, existingCompletionState, isManualCompletion, secondaryUrl\n            ) {\n            modalFactory.create({\n                type: modalFactory.types.DEFAULT,\n                title: title,\n                body: loadingIconHtml\n            }).done(function (modal) {\n                modalStore[cmId] = modal;\n                modal.setLarge();\n                modal.show();\n                const modalRoot = $(modal.root);\n                modalRoot.attr(\"id\", \"embed_mod_modal_\" + cmId);\n                modalRoot.data(\"cmid\", cmId);\n                modalRoot.data(\"section\", sectionNum);\n                modalRoot.addClass(\"embed_cm_modal\");\n\n                // If it's a page activity, we simply add the page HTML as the modal body.\n                // Otherwise, we set the body by rendering from a template.\n                if (objectType === 'page') {\n                    modalRoot.addClass('mod_' + objectType);\n                    stopAllVideosOnDismiss(modalRoot);\n                    Fragment.loadFragment(\n                        'format_tiles', `get_cm_content`, moduleContextId, {contextid: moduleContextId}\n                    )\n                       .done(function(html, js) {\n                            modal.setBody(html);\n                            Templates.runTemplateJS(js);\n                        });\n                } else {\n                    // Render the modal body and set it to the page.\n                    // First a blank template data object.\n                    var templateData = {\n                        id: cmId,\n                        pluginfileUrl: pluginfileUrl,\n                        objectType: null,\n                        width: \"100%\",\n                        height: Math.round(win.height() - 60), // Embedded object height in modal - make as high as poss.\n                        cmid: cmId,\n                        tileid: sectionNum,\n                        isediting: 0,\n                        sesskey: config.sesskey,\n                        activityname: title,\n                        config: {wwwroot: config.wwwroot},\n                        completionstring: '',\n                        secondaryurl: secondaryUrl\n                    };\n\n                    var template = null;\n                    if (objectType === \"resource_html\") {\n                        templateData.objectType = \"text/html\";\n                        template = 'format_tiles/embed_file_modal_body';\n                    } else if (objectType === \"resource_pdf\") {\n                        templateData.objectType = 'application/pdf';\n                        template = 'format_tiles/embed_file_modal_body';\n                    } else if (objectType === \"url\") {\n                        templateData.objectType = 'url';\n                        template = 'format_tiles/embed_url_modal_body';\n                    }\n\n                    Templates.render(template, templateData).done(function (html) {\n                        modal.setBody(html);\n                        modalRoot.find(Selector.modalBody).animate({\"min-height\": Math.round(win.height() - 60)}, \"fast\");\n\n                        if (objectType === \"resource_html\" || objectType === 'url') {\n                            // HTML files only - set widths to 100% since they may contain embedded videos etc.\n                            modalRoot.find(Selector.modal).animate({\"max-width\": \"100%\"}, \"fast\");\n                            modalRoot.find(Selector.modalDialog).animate({\"max-width\": \"100%\"}, \"fast\");\n                            modalRoot.find(Selector.modalBody).animate({\"max-width\": \"100%\"}, \"fast\");\n                            stopAllVideosOnDismiss(modalRoot);\n                            if (objectType === 'url') {\n                                modalRoot.find(Selector.modalBody).addClass(\"text-center\");\n                            }\n                        } else if (objectType === \"resource_pdf\") {\n                            // Otherwise (e.g. for PDF) we don't need 100% width.\n                            modalRoot.find(Selector.modal).animate({\"max-width\": modalMinWidth()}, \"fast\");\n                            // We do modal-dialog too since Moove theme uses it.\n                            modalRoot.find(Selector.modalDialog).animate({\"max-width\": modalMinWidth()}, \"fast\");\n                        }\n\n                    }).fail(Notification.exception);\n                }\n\n                // Render the modal header / title and set it to the page.\n                var headerTemplateData = {\n                    cmid: cmId,\n                    activityname: title,\n                    tileid: sectionNum,\n                    showDownload: objectType === \"resource_pdf\" ? 1 : 0,\n                    showNewWindow: objectType === \"resource_pdf\" ? 1 : 0,\n                    pluginfileUrl: pluginfileUrl,\n                    forModal: true\n                };\n                if (completionEnabled) {\n                    headerTemplateData.istrackeduser = 1;\n                    headerTemplateData.hascompletion = 1;\n                    const oldState = existingCompletionState === 1;\n\n                    // Core completion button template has 'overallcomplete' arg relating to this cm.\n                    // See course/templates/completion_manual.mustache.\n                    headerTemplateData.overallcomplete = oldState ? 1 : 0;\n                    headerTemplateData.overallincomplete = oldState ? 0 : 1;\n                    headerTemplateData.completionIsManual = isManualCompletion;\n                    if (!headerTemplateData.completionIsManual) {\n                        // Auto completion has different vars for core template core_course/completion_automatic.\n                        headerTemplateData.statuscomplete = headerTemplateData.overallcomplete;\n                        headerTemplateData.statusincomplete = headerTemplateData.overallincomplete;\n                    }\n                    // Trigger event to check if other items in course have updated availability.\n                    if (oldState !== headerTemplateData.completionstate) {\n                        require([\"format_tiles/completion\"], function (completion) {\n                            completion.triggerCompletionChangedEvent(parseInt(sectionNum), parseInt(cmId));\n                        });\n                    }\n                }\n\n                Templates.render(\"format_tiles/embed_module_modal_header_btns\", headerTemplateData).done(function (html) {\n                    modalRoot.find(Selector.embedModuleButtons).remove();\n                    modalRoot.find($('button.close')).remove();\n                    modalRoot.find(Selector.modalHeader).append(html);\n                    modalRoot.find(Selector.closeBtn).detach().appendTo(modalRoot.find(Selector.embedModuleButtons));\n                    const toggleCompletionSelector = '[data-action=\"toggle-manual-completion\"]';\n                    modalRoot.find(toggleCompletionSelector).on('click', () => {\n                        require([\"format_tiles/completion\"], function (completion) {\n                            // In this case, core will handle the request to set the new completion value in the DB.\n                            // We wait a moment to allow that to get a head start.\n                            // Then we trigger an event which course.js will see and update section content to show new statuses.\n                            // Use will not notice this as they are looking at the modal, but it's ready when they dismiss modal.\n                            setTimeout(() => {\n                                completion.triggerCompletionChangedEvent(\n                                    parseInt(modalRoot.data('section')), parseInt(modalRoot.data(\"cmid\"))\n                                );\n                            }, 300);\n                        });\n                    });\n                }).fail(Notification.exception);\n\n                // Allow a short delay before we resize the modal, and check a few times, as content may be loading.\n                setTimeout(() => {\n                    modalHeightChangeWatcher(modalRoot, 3, 1000);\n                }, 500);\n\n                return true;\n            });\n            return false;\n        };\n\n        /**\n         * Resize the modal to account for its content.\n         * @param {object} modalRoot\n         */\n        var resizeModal = function(modalRoot) {\n            modalRoot.find(Selector.modal).animate({\"max-width\": modalMinWidth()}, \"fast\");\n\n            var MODAL_MARGIN = 70;\n\n            // If the modal contains a Moodle mediaplayer div, remove the max width css rule which Moodle applies.\n            // Otherwise video will be 400px max wide.\n            var mediaPlayer = $(Selector.moodleMediaPlayer);\n            mediaPlayer.find(\"div\").each(function(index, child) {\n                $(child).css(\"max-width\", \"\");\n            });\n            if (mediaPlayer.length > 0) {\n                stopAllVideosOnDismiss(modalRoot);\n            }\n\n            // If the activity contains an iframe (e.g. is a page with a YouTube video in it, or H5P), ensure modal is big enough.\n            // Do this for every iframe in the course module.\n            modalRoot.find(Selector.iframe).each(function (index, iframe) {\n\n                // Get the modal.\n                var modal;\n                // Boost calls the modal \"modal dialog\" so try this first.\n                modal = modalRoot.find(Selector.modalDialog);\n\n                // If no luck, try what Clean and Adaptable do instead.\n                if (modal.length === 0) {\n                    modal = modalRoot.find(Selector.modal);\n                }\n\n                // Now check and adjust the width of the modal.\n                var iframeWidth = Math.min($(iframe).width(), win.width());\n                if (iframeWidth > modal.width() - MODAL_MARGIN) {\n                    modal.animate(\n                        {\"max-width\": Math.max(iframeWidth + MODAL_MARGIN, modalMinWidth())},\n                        \"fast\"\n                    );\n                    modalRoot.find(Selector.modal).animate(\n                        {\"max-width\": Math.max(iframeWidth + MODAL_MARGIN, modalMinWidth())},\n                        \"fast\"\n                    );\n                }\n\n                // Then the height of the modal body.\n                var iframeHeight = Math.min($(iframe).height(), win.height());\n                var modalBody = modalRoot.find(Selector.modalBody);\n                if (iframeHeight > modalBody.height() - MODAL_MARGIN) {\n                    modalBody.animate({\"min-height\": Math.min(iframeHeight + MODAL_MARGIN, win.height()) + 1}, \"fast\");\n                }\n                stopAllVideosOnDismiss(modalRoot);\n            });\n        };\n\n        /**\n         * Check the modal height to see if the iframe in it is bigger.  If it is, adjust modal height up.\n         * Do this a few times so that, if iframe content is loading, we can check after it's loaded.\n         * @param {object} modalRoot\n         * @param {number} howManyChecks\n         * @param {number}duration\n         * @param {number} oldHeight\n         */\n        const modalHeightChangeWatcher = function (modalRoot, howManyChecks, duration, oldHeight = 0) {\n            const iframe = modalRoot.find(Selector.modalBody);\n            if (iframe) {\n                const newHeight = Math.round(iframe.height());\n                if (newHeight && newHeight > oldHeight + 10) {\n                    resizeModal(modalRoot);\n                }\n                if (howManyChecks > 0) {\n                    setTimeout(() => {\n                        modalHeightChangeWatcher(modalRoot, howManyChecks - 1, duration, newHeight);\n                    }, duration);\n                }\n            }\n        };\n\n\n        /**\n         * If a URL activity is clicked and it's been set to open in \"Pop up\" then launch a browser pop up.\n         * @param {object} e\n         */\n        var launchUrlPopUp = function (e) {\n            var clickedActivity = $(e.currentTarget).closest(Selector.ACTIVITY);\n            if (clickedActivity.data(\"url\") !== undefined) {\n                e.stopPropagation();\n                e.preventDefault();\n                // Log the fact we viewed it.\n                ajax.call([{\n                    methodname: \"format_tiles_log_mod_view\", args: {\n                        courseid: courseId,\n                        cmid: clickedActivity.data(\"cmid\")\n                    }\n                }])[0].done(function () {\n                    // Because we intercepted the normal event for the click, process auto completion.\n                    const sectionNum = clickedActivity.closest(Selector.section).data('section');\n                    const cmid = clickedActivity.data('cmid');\n                    require([\"format_tiles/completion\"], function (completion) {\n                        completion.triggerCompletionChangedEvent(\n                            sectionNum ? parseInt(sectionNum) : 0,\n                            cmid ? parseInt(cmid) : 0\n                        );\n                    });\n                    // Then open the pop up.\n                    window.open(clickedActivity.data(\"url\"));\n                }).fail(Notification.exception);\n            }\n        };\n\n        const logCmView = function(cmId) {\n            ajax.call([{\n                methodname: \"format_tiles_log_mod_view\", args: {\n                    courseid: courseId,\n                    cmid: cmId\n                }\n            }])[0].fail(Notification.exception);\n        };\n\n        /**\n         * Do we appear to need a modal for this cm?  (Not definitive and subsequent AJAX check needed).\n         * @param {number} cmId course module ID\n         * @param {string} url\n         * @return boolean\n         */\n        const modalCheckNeeded = function(cmId, url) {\n            if (tilesConfig.modalallowedmodnames === undefined || tilesConfig.modalallowedresourcecms === undefined) {\n                return false;\n            }\n            return ((tilesConfig.modalallowedmodnames).includes('page') && url.startsWith(`${config.wwwroot}/mod/page/view.php`))\n                || ((tilesConfig.modalallowedmodnames).includes('url') && url.startsWith(`${config.wwwroot}/mod/url/view.php`))\n                || (tilesConfig.modalallowedmodnames).includes('pdf')\n                        && (tilesConfig.modalallowedresourcecms.pdf).includes(cmId.toString())\n                || (tilesConfig.modalallowedmodnames).includes('html')\n                        && (tilesConfig.modalallowedresourcecms.html).includes(cmId.toString());\n        };\n\n\n        return {\n            init: function (courseIdInit, isEditing, pageType, launchModalCmid) {\n                courseId = courseIdInit;\n                $(document).ready(function () {\n                    tilesConfig = $('#format-tiles-js-config').data();\n                    const courseIndex = $('nav#courseindex');\n\n                    if (pageType === 'course-view') {\n                        // We are on the main tiles page.\n                        // If any link in the course index on the left is clicked, check if it needs a modal.\n                        // If it does, launch the modal instead of following the link.\n                        // This isn't ideal but saves plugin re-implementing / maintaining large volume of course index code.\n                        if (courseIndex.length > 0) {\n                            courseIndex.on('click', function(e) {\n                                const target = $(e.target);\n                                const link = target.hasClass('courseindex-link') ? target : target.find('a.courseindex-link');\n                                if (link && link.data('for') === 'cm_name') {\n                                    e.preventDefault();\n                                    const linkUrl = link.attr('href');\n                                    if (linkUrl) {\n                                        const cmId = link.closest('li.courseindex-item').data('id');\n                                        if (modalCheckNeeded(cmId, linkUrl)) {\n                                            ajax.call([{\n                                                methodname: \"format_tiles_get_course_mod_info\", args: {cmid: cmId}\n                                            }])[0].done(function (data) {\n                                                if (!data || !data.modalallowed) {\n                                                    window.location.href = linkUrl;\n                                                }\n                                                const expandedSection = $(`li#section-${data.sectionnumber}.state-visible`);\n                                                if (expandedSection.length === 0) {\n                                                    require([\"format_tiles/course\"], function (course) {\n                                                        course.populateAndExpandSection(\n                                                            data.coursecontextid, data.sectionid, data.sectionnumber\n                                                        );\n                                                    });\n                                                }\n\n                                                launchCmModal(\n                                                    cmId,\n                                                    data.modulecontextid,\n                                                    data.sectionnumber,\n                                                    data.name,\n                                                    data.modname === 'resource' ? `resource_${data.resourcetype}` : data.modname,\n                                                    data.modname === 'url' || data.resourcetype === 'html'\n                                                        ? data.pluginfileurl : linkUrl,\n                                                    data.completionenabled ? 1 : 0,\n                                                    data.iscomplete ? 1 : 0,\n                                                    data.ismanualcompletion,\n                                                    data.pluginfileurl\n                                                );\n                                            })\n                                                .fail(function() {\n                                                    window.location.href = linkUrl;\n                                                });\n                                        } else {\n                                            window.location.href = linkUrl;\n                                        }\n                                    }\n                                }\n                            });\n                        }\n\n                        // If we are passing ?cmid=xxx in the URL this suggests we are trying to launch course mod modal.\n                        // This would be from clicking a course index link while in another activity.\n                        // E.g. from /mod/xxx/view.php for another course module.\n                        // This isn't ideal but saves this plugin re-implementing / maintaining large volume of course index code.\n                        if (launchModalCmid) {\n                            ajax.call([{\n                                methodname: \"format_tiles_get_course_mod_info\", args: {cmid: launchModalCmid}\n                            }])[0].done(function (data) {\n                                if (data && data.modalallowed) {\n                                    const expandedSection = $(`li#section-${data.sectionnumber}.state-visible`);\n                                    if (expandedSection.length === 0) {\n                                        require([\"format_tiles/course\"], function (course) {\n                                            course.populateAndExpandSection(\n                                                data.coursecontextid, data.sectionid, data.sectionnumber\n                                            );\n                                        });\n                                    }\n\n                                    launchCmModal(\n                                        launchModalCmid,\n                                        data.modulecontextid,\n                                        data.sectionnumber,\n                                        data.name,\n                                        data.modname === 'resource' ? `resource_${data.resourcetype}` : data.modname,\n                                        data.modname === 'url' ? data.pluginfileurl : '',\n                                        data.completionenabled ? 1 : 0,\n                                        data.iscomplete ? 1 : 0,\n                                        data.ismanualcompletion,\n                                        data.pluginfileurl\n                                    );\n                                }\n                            });\n                        }\n\n                        const launchModalDataActions =\n                            [\"launch-tiles-resource-modal\", \"launch-tiles-module-modal\", \"launch-tiles-url-modal\"];\n                        var modalSelectors = launchModalDataActions.map(function (action) {\n                            return `[data-action=\"${action}\"]`;\n                        }).join(\", \");\n\n                        var pageContent = $(Selector.pageContent);\n                        if (pageContent.length === 0) {\n                            // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                            pageContent = $(Selector.regionMain);\n                        }\n                        pageContent.on(\"click\", modalSelectors, function (e) {\n                            // If click is on a completion checkbox within activity, ignore here as handled elsewhere.\n                            const tgt = $(e.target);\n                            const isCompletionControl = tgt.hasClass(CLASS.COMPLETION_CHECK_BOX)\n                                || tgt.parent().hasClass(CLASS.COMPLETION_CHECK_BOX)\n                                || tgt.hasClass(CLASS.COMPLETION_DROPDOWN)\n                                || tgt.parent().hasClass(CLASS.COMPLETION_DROPDOWN)\n                                || tgt.is(\":button\");\n                            if (isCompletionControl) {\n                                return;\n                            }\n                            e.preventDefault();\n                            const currTgt = $(e.currentTarget);\n                            var clickedCmObject = currTgt.closest(\"li.activity\");\n                            const cmId = clickedCmObject.data('cmid');\n                            const moduleContextId = clickedCmObject.data('contextid');\n                            const sectionNum = clickedCmObject.closest(Selector.sectionMain).data('section');\n\n                            // If we already have this modal on the page, launch it.\n                            var existingModal = modalStore[cmId];\n                            if (typeof existingModal === \"object\") {\n                                existingModal.show();\n                            } else {\n                                // Log the fact we viewed it (only do this once not every time the modal launches).\n                                logCmView(cmId);\n\n                                // We don't already have it, so make it.\n                                launchCmModal(\n                                    cmId,\n                                    moduleContextId,\n                                    sectionNum,\n                                    clickedCmObject.data('title'),\n                                    clickedCmObject.data('modtype'),\n                                    clickedCmObject.data('url'),\n                                    clickedCmObject.hasClass(CLASS.COMPLETION_ENABLED),\n                                    clickedCmObject.data('completion-state')\n                                        ? parseInt(clickedCmObject.data('completion-state')) : null,\n                                    clickedCmObject.hasClass(CLASS.COMPLETION_MANUAL),\n                                    clickedCmObject.closest(Selector.ACTIVITY).data(\"url-secondary\")\n                                );\n                            }\n                        });\n\n                        // Render the loading icon and append it to body so that we can use it later.\n                        Templates.render(\"format_tiles/loading\", {})\n                            .catch(Notification.exception)\n                            .done(function (html) {\n                                loadingIconHtml = html; // TODO get this from elsewhere.\n                            }).fail(Notification.exception);\n\n                        if (!isEditing) {\n                            // If a URL activity is clicked and it's been set to open in \"Pop up\" then launch a browser pop up.\n                            pageContent.on(\"click\", Selector.URLACTIVITYPOPUPLINK, function(e) {\n                                launchUrlPopUp(e);\n                            });\n                        }\n\n                        // If completion of a cm changes, remove it from store so that it can be re-rendered with correct heading.\n                        $(document).on('format-tiles-completion-changed', function(e, data) {\n                            if (data.cmid && modalStore[data.cmid]) {\n                                modalStore[data.cmid] = undefined;\n                            }\n                        });\n                    } else if (pageType.match('^mod-[a-z]+-view$')) {\n                        courseIndex.on('click', function (e) {\n                            const target = $(e.target);\n                            const link = target.hasClass('courseindex-link') ? target : target.find('a.courseindex-link');\n                            if (link && link.data('for') === 'cm_name') {\n                                e.preventDefault();\n                                const linkUrl = link.attr('href');\n                                if (linkUrl) {\n                                    const link = $(e.target);\n                                    const cmId = link.closest('li.courseindex-item').data('id');\n                                    if (modalCheckNeeded(cmId, linkUrl)) {\n                                        ajax.call([{\n                                            methodname: \"format_tiles_get_course_mod_info\", args: {cmid: cmId}\n                                        }])[0].done(function (data) {\n                                            if (!data || !data.modalallowed) {\n                                                window.location.href = linkUrl;\n                                            }\n                                            window.location.href =\n                                                `${config.wwwroot}/course/view.php?id=${data.courseid}&cmid=${data.id}`;\n                                        });\n                                    } else {\n                                        window.location.href = linkUrl;\n                                    }\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        };\n    }\n);\n"],"names":["define","$","modalFactory","config","Templates","Notification","ajax","Fragment","loadingIconHtml","modalStore","win","window","courseId","tilesConfig","Selector","modal","modalDialog","modalBody","sectionMain","pageContent","regionMain","completionState","cmModal","moodleMediaPlayer","closeBtn","ACTIVITY","URLACTIVITYPOPUPLINK","modalHeader","embedModuleButtons","iframe","CLASS","modalMinWidth","Math","min","width","stopAllVideosOnDismiss","find","length","click","e","currentTarget","closest","each","index","attr","object","data","undefined","html","launchCmModal","cmId","moduleContextId","sectionNum","title","objectType","pluginfileUrl","completionEnabled","existingCompletionState","isManualCompletion","secondaryUrl","create","type","types","DEFAULT","body","done","setLarge","show","modalRoot","root","addClass","loadFragment","contextid","js","setBody","runTemplateJS","templateData","id","height","round","cmid","tileid","isediting","sesskey","activityname","wwwroot","completionstring","secondaryurl","template","render","animate","fail","exception","headerTemplateData","showDownload","showNewWindow","forModal","istrackeduser","hascompletion","oldState","overallcomplete","overallincomplete","completionIsManual","statuscomplete","statusincomplete","completionstate","require","completion","triggerCompletionChangedEvent","parseInt","remove","append","detach","appendTo","on","setTimeout","modalHeightChangeWatcher","resizeModal","mediaPlayer","child","css","iframeWidth","max","iframeHeight","howManyChecks","duration","oldHeight","newHeight","modalCheckNeeded","url","modalallowedmodnames","modalallowedresourcecms","includes","startsWith","pdf","toString","init","courseIdInit","isEditing","pageType","launchModalCmid","document","ready","courseIndex","target","link","hasClass","preventDefault","linkUrl","call","methodname","args","modalallowed","location","href","sectionnumber","course","populateAndExpandSection","coursecontextid","sectionid","modulecontextid","name","modname","resourcetype","pluginfileurl","completionenabled","iscomplete","ismanualcompletion","modalSelectors","map","action","join","tgt","parent","is","clickedCmObject","existingModal","courseid","logCmView","catch","clickedActivity","stopPropagation","section","open","launchUrlPopUp","match"],"mappings":"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"}